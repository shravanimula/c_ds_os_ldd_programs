1.Write a program to count the set bits in a given number

#include<stdio.h>
int main()
{
	int number,count=0;
	printf("enter a number:");
	scanf("%d",&number);
	while(number)
	{
		if((number & 1 )==1)
			count ++;
		number=number >> 1;	
	}
	printf("count the number of set bits:%d\n",count);
}

2.write a program to check our machine is little endian or big endian

#include<stdio.h>
int main()
{
	int a=1;
	char *ptr=NULL;
	ptr=(char *) &a;
	if(*ptr==1)
		printf("little endian\n");
	else
		printf("big endian\n");
}

3.Write a program given number is even or odd ?

#include<stdio.h>
int main()
{
	int number;
	printf("enter a number:");
	scanf("%d",&number);
	if(number & 1 == 1)
		printf("given number is odd:%d\n",number);
	else
		printf("given number is even:%d\n",number);
}

4.Write a program to userdefined sizeof operator

#include<stdio.h>
#define mysize(type) (char *)(&type + 1) - (char *)(&type)
int main()
{
	char i;
	printf("size of integer is :%ld\n",mysize(i));
}

5.Write a program to userdefined strcat function

#include<stdio.h>
#define SIZE 50
void mystrcat(char dest[],char src[])
{
	int i,len;
	for(i=0;dest[i]!='\0';i++)
	{
		len++;
	}
	for(i=0;src[i]!='\0';i++)
	{
		dest[len+i]=src[i];
	}
	dest[len+i]='\0';
	printf("after the concat the strings are:%s\t%s\n",dest,src);
}
int main()
{
	char str1[SIZE],str2[SIZE];
	printf("enter a string1:");
	scanf("%s",str1);
	printf("enter a string2:");
	scanf("%s",str2);
	printf("before strcat the strings are:%s\t%s\n",str1,str2);
	mystrcat(str1,str2);
}

6.write a program to user defined strlen fuction 

#include<stdio.h>
#define SIZE 50
int main()
{
	char str[SIZE];
	int i,length=0;
	printf("enter a string:");
	scanf("%s",str);
	for(i=0;str[i]!='\0';i++)
	{
		length++;
	}
	printf("length of the string:%d\n",length);
}

7.Write a program to toggle the bit nth position

#include<stdio.h>
int main()
{
	int number,pos,result;
	printf("enter a number:");
	scanf("%d",&number);
	printf("enter the postion:");
	scanf("%d",&pos);
	result=number ^ (1 << pos);
	printf("the result of the number is :%d\n",result);
}

8.write a program to set the nth position

#include<stdio.h>
int main()
{
	int number,position,result;
	printf("enter a number:");
	scanf("%d",&number);
	printf("enter the position to set:");
	scanf("%d",&position);
	result=number | (1 << position);
	printf("the result of the number is :%d\n",result);
}

9.write a  program using volatile and non volatile 

#include<stdio.h>
int main()
{
	volatile int i=10;
	int a=100;
	printf("%d\t%d\t%d\t%d\n",++a,--a,++a,--a);
	printf("%d\t%d\t%d\t%d\n",++i,--i,++i,--i);
}

10.write a program to reverse the single linked list 

#include<stdio.h>
#include<stdlib.h>
struct st {
	int data;
	struct st *link;
};
struct st *add(struct st *ptr)
{
	struct st *newnode=NULL;
	newnode=(struct st*)malloc(sizeof(struct st));
	if(newnode==NULL)
	{
		printf("newnode is not created\n");
	}
	else
	{
		printf("enter the data:");
		scanf("%d",&newnode->data);
		newnode->link=NULL;
		newnode->link=ptr;
		ptr=newnode;
	}
	return ptr;
}
void display(struct st *ptr)
{
	if(ptr==NULL)
	{
		printf("list is empty\n");
	}
	else
	{
		while(ptr)
		{
			printf("%d\n",ptr->data);
			ptr=ptr->link;
		}
	}
}
struct st *reverse(struct st *ptr)
{
	struct st *prev=NULL,*cur=NULL,*next=NULL;
	if(ptr==NULL)
	{
		printf("list is empty\n");
	}
	else if(ptr->link==NULL)
	{
		printf("list is having only one node\n");
	}
	else
	{
		next=ptr;
		while(next)
		{
			prev=cur;
			cur=next;
			next=next->link;
			cur->link=prev;
		}
		ptr=cur;
	}
	return ptr;
}
int main()
{
	struct st *head=NULL;
	int choice;
	while(1)
	{
		printf("1.add  2.display 3.reverse 4.exit:");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:head=add(head);
			       break;
			case 2:display(head);
			       break;
			case 3:head=reverse(head);
			       break;
			case 4:exit(0);
		}
	}
}
			      

11.write a program for structure padding and how to avoid structure padding

#include<stdio.h>
//#pragma pack(1)
struct student{
	char ch;
	int i;
	char b;
	double d;
};
int main()
{
	struct student var;
	printf("the size of the structure:%ld\n",sizeof(var));
}

12.write a program const to pointer and pointer to const

#include<stdio.h>
int main()
{
	//pointer to const
	int i=10,j=100;
	const int *ptr=&i;
	printf("%d\n",*ptr);
	ptr=100;//error
	ptr=&j;
	printf("%d\n",*ptr);


	//const to pointer
	int a=10,b=20;
	int *const ptr1=&a;
	printf("%d\n",*ptr1);
	*ptr1=100;
	printf("%d\n",*ptr1);
	ptr1=&b;//error
	printf("%d\n",*ptr1);
}
